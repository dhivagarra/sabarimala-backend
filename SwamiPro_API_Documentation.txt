# SwamiPro API Documentation

## User APIs

### 1. Register User
- **Endpoint:** POST /api/users/register
- **Request Body:**
```json
{
  "userId": "john123",
  "password": "password123",
  "userName": "John Doe",
  "mobilenumber": "9876543210",
  "email": "john@example.com",
  "role": "admin",
  "isActive": "1",
  "cretedBy": "admin"
}
```
- **Response:**
```json
{ "message": "User created" }
```

---

### 2. Login User
- **Endpoint:** POST /api/users/login
- **Request Body:**
```json
{
  "userId": "john123",
  "password": "password123"
}
```
- **Response (Success):**
```json
{ "message": "Login successful" }
```
- **Response (Failure):**
```json
{ "message": "Invalid credentials" }
```

---

### 3. Get All Users
- **Endpoint:** GET /api/users/
- **Response:**
```json
[
  {
    "userId": "john123",
    "userName": "John Doe",
    "mobilenumber": "9876543210",
    "email": "john@example.com",
    "role": "admin",
    "isActive": "1",
    "cretedBy": "admin"
  },
  ...
]
```

---

### 4. Get User by userId
- **Endpoint:** GET /api/users/:userId
- **Response (Success):**
```json
{
  "userId": "john123",
  "userName": "John Doe",
  "mobilenumber": "9876543210",
  "email": "john@example.com",
  "role": "admin",
  "isActive": "1",
  "cretedBy": "admin"
}
```
- **Response (Not Found):**
```json
{ "message": "User not found." }
```

---

## PackLog APIs

### 1. Create Pack Log
- **Endpoint:** POST /api/packlog/
- **Request Body:**
```json
{
  "sealDT": "2025-09-04 10:00:00",
  "transNo": "T12345",
  "nada": "NADA1",
  "vanchi": "VANCHI1",
  "bagno": "BAG1",
  "sealBy": "John Doe",
  "receDT": "2025-09-04 12:00:00",
  "receBy": "Jane Doe",
  "packStatus": "sealed",
  "comments": "All good",
  "createdBy": "admin",
  "isActive": "1"
}
```
- **Response:**
```json
{
  "packid": "uuid-value",
  "sealDT": "2025-09-04 10:00:00",
  "transNo": "T12345",
  "nada": "NADA1",
  "vanchi": "VANCHI1",
  "bagno": "BAG1",
  "sealBy": "John Doe",
  "receDT": "2025-09-04 12:00:00",
  "receBy": "Jane Doe",
  "packStatus": "sealed",
  "comments": "All good",
  "createdBy": "admin",
  "createAt": "2025-09-04 09:55:00",
  "isActive": "1"
}
```

---

### 2. Get All Pack Logs
- **Endpoint:** GET /api/packlog/
- **Response:**
```json
[
  {
    "packid": "uuid-value",
    "sealDT": "2025-09-04 10:00:00",
    "transNo": "T12345",
    "nada": "NADA1",
    "vanchi": "VANCHI1",
    "bagno": "BAG1",
    "sealBy": "John Doe",
    "receDT": "2025-09-04 12:00:00",
    "receBy": "Jane Doe",
    "packStatus": "sealed",
    "comments": "All good",
    "createdBy": "admin",
    "createAt": "2025-09-04 09:55:00",
    "isActive": "1"
  },
  ...
]
```

---

### 3. Get Pack Logs by Seal Date
- **Endpoint:** GET /api/packlog/date/:date
- **Params:** date in YYYY-MM-DD format
- **Response:**
```json
[
  {
    "packid": "uuid-value",
    "sealDT": "2025-09-04 10:00:00",
    ...
  },
  ...
]
```

---

### 4. Get Pack Logs by Seal Date Range
- **Endpoint:** GET /api/packlog/range?start=YYYY-MM-DD&end=YYYY-MM-DD
- **Response:**
```json
[
  {
    "packid": "uuid-value",
    "sealDT": "2025-09-04 10:00:00",
    ...
  },
  ...
]
```

---

### 5. Get Pack Log(s) by Transaction No
- **Endpoint:** GET /api/packlog/transno/:transNo
- **Response:**
```json
[
  {
    "packid": "uuid-value",
    "transNo": "T12345",
    ...
  },
  ...
]
```

---

### 6. Update Pack Log(s) by Transaction No
- **Endpoint:** PUT /api/packlog/transno/:transNo
- **Request Body:**
```json
{
  "sealDT": "2025-09-04 10:00:00",
  "nada": "NADA1",
  "vanchi": "VANCHI1",
  "bagno": "BAG1",
  "sealBy": "John Doe",
  "receDT": "2025-09-04 12:00:00",
  "receBy": "Jane Doe",
  "packStatus": "received",
  "comments": "Updated",
  "createdBy": "admin",
  "createAt": "2025-09-04 09:55:00",
  "isActive": "1"
}
```
- **Response:**
```json
[
  {
    "packid": "uuid-value",
    "transNo": "T12345",
    ...
  },
  ...
]
```

---

### 7. Delete Pack Log(s) by Transaction No
- **Endpoint:** DELETE /api/packlog/transno/:transNo
- **Response:**
```json
{ "message": "Pack log(s) deleted" }
```

---

## Notes
- All datetime fields must be in `YYYY-MM-DD HH:mm:ss` format.
- All endpoints return error messages in the format:
```json
{ "message": "Error message", "error": "Detailed error (if any)" }
```
- Replace `uuid-value` with the actual UUID returned by the system.
